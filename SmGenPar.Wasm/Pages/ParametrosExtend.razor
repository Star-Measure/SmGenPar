@page "/Parametros/Extend/{ParameterName}"
@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.Components.Rendering
@using Newtonsoft.Json
@using SmGenPar.Logic.Cache
@using SmGenPar.Wasm.Components
@using JsonSerializer = System.Text.Json.JsonSerializer
@using System.Xml.Linq
@using System.Xml.Serialization
@using SMIO.ValueTypes

@inject IJSRuntime Js


<form class="MeterForm" onsubmit="@OnSubmit">
    @_renderFragments![ParameterName!]
    <button type="submit">Submit</button>
</form>

<style>
    .MeterForm {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        justify-content: flex-start;
        width: 100%;
        height: 100%;
        font-family: Perpetua, serif;
    }
    
    input:invalid {
        outline: 2px solid darkred;
    }
</style>

@code {

    [Parameter]
    public string? ParameterName { get; set; }

    readonly static Extend? Model = (Extend)FormRender.CachedModels["Extend"];

    Dictionary<string, RenderFragment>? _renderFragments;

    readonly FormRender _formsRenderer = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _formsRenderer.AddRenderForType<Mostradores>(MostradorFragment);
        _formsRenderer.AddRenderForType<ReposicaoDemanda>(ReposicaoFragment);
        _renderFragments = _formsRenderer.RenderModelProperties(Model!);
    }


    async Task DownloadFileFromStream(Stream stream, string fileName)
    {
        using var streamRef = new DotNetStreamReference(stream);

        await Js.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    static void RemoveEmptyTags(XContainer xNode)
    {
        var xElements = xNode.Descendants();

        static bool IsEmptyTag(XElement childNode) => 
            childNode is null or { IsEmpty: true } || string.IsNullOrWhiteSpace(childNode.Value);

        xElements.Where(IsEmptyTag).Remove();
    }

    async void OnSubmit()
    {
        Console.WriteLine(Model);
        const string rootName = "Extend";
        try {
            var xDoc = SerializeToXml(Model, rootName);
            RemoveEmptyTags(xDoc);
            var stream = new MemoryStream();
            try {
                xDoc.Save(stream);
            }
            catch (InvalidOperationException) {
                var rootElement = XElement.Parse(@$"<{rootName}/>");
                stream.Seek(0, SeekOrigin.Begin);
                rootElement.Save(stream);
            }
            finally {
                stream.Seek(0, SeekOrigin.Begin);
                await DownloadFileFromStream(stream, "ParametrosExtend.xml");
            }
        }
        catch (Exception ex) {
            Console.Error.WriteLine(ex);
        }
    }

    static XDocument SerializeToXml(object? obj, string rootName = "root")
    {
        var json = JsonSerializer.Serialize(obj);

        Console.WriteLine(json);

        var xel = JsonConvert.DeserializeXNode(json, rootName);

        return xel;
    }


    void ReposicaoFragment(
        RenderTreeBuilder builder,
        string id,
        string name,
        Action<ChangeEventArgs> callback,
        Attribute[] attributes)
    {
        var properties = typeof(ReposicaoDemanda).GetProperties();

        for (var i = 0; i < 12; i++) {
            var month = i + 1;
            var propertyInfo = properties[i];
            var newId = $"{id}.{propertyInfo.Name}";
            builder.AddLabelElement(newId, propertyInfo.Name);
            builder.OpenElement(0, "div");
            builder.OpenElement(0, "input");
            builder.AddAttribute(1, "class", "form-control");
            builder.AddAttribute(2, "id", $"{id}.{propertyInfo.Name}");
            builder.AddAttribute(3, "name", propertyInfo.Name);
            builder.AddAttribute(4, "type", "number");
            builder.AddAttribute(6, "min", 1);
            builder.AddAttribute(7, "max", DateTime.DaysInMonth(DateTime.UtcNow.Year, month));
            builder.AddAttribute(8, "onchange", (ChangeEventArgs changeEventArgs) =>
            {
                var value = (string?)changeEventArgs?.Value;
                if (string.IsNullOrWhiteSpace(value)) {
                    return;
                }
                var day = byte.Parse(value);

                var reposicao = _formsRenderer.ElementValue
                    .GetValueRefOrCreate(id, () => new ReposicaoDemanda());

                propertyInfo.SetValue(reposicao, day);
                callback(new ChangeEventArgs {
                    Value = reposicao
                });
            });
            builder.CloseElement();
            builder.CloseElement();
        }
    }

    void MostradorFragment(
        RenderTreeBuilder builder,
        string id,
        string name,
        Action<ChangeEventArgs> callback,
        Attribute[] attributes)
    {
        builder.OpenElement(0, "fieldset");
        builder.AddAttribute(1, "class", "MeterForm");
        var enumNames = Enum.GetNames<MostradoresFlag>();
        var enumValues = Enum.GetValues<MostradoresFlag>();

        for (var index = 0; index < enumNames.Length; index++) {
            var enumName = enumNames[index];
            var enumValue = enumValues[index];

            builder.OpenElement(2, "div");
            var newId = $"{id}.{enumName}";
            builder.OpenElement(3, "input");
            builder.AddAttribute(4, "id", newId);
            builder.AddAttribute(5, "name", newId);
            builder.AddAttribute(6, "type", "checkbox");
            builder.AddAttribute(7, "checked", false);
            builder.AddAttribute(8, "onchange", (ChangeEventArgs changeEventArgs) =>
            {
                var mostradores = (Mostradores)_formsRenderer.ElementValue
                    .GetValueOrDefault(id, default(Mostradores));

                var bit = changeEventArgs.Value as bool? ?? false;
                mostradores = mostradores.SetBit((int)enumValue, bit);

                _formsRenderer.ElementValue[id] = mostradores;
                callback(new ChangeEventArgs {
                    Value = mostradores
                });
            });

            builder.CloseElement();
            const string htmlSpace = "&nbsp;";
            builder.AddMarkupContent(9, htmlSpace);
            builder.AddLabelElement(newId, enumName);
            builder.CloseElement();
        }

        builder.CloseElement();
    }

}