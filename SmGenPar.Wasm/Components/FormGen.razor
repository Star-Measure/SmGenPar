@using Microsoft.AspNetCore.Components.Rendering
@using System.Collections
@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Linq.Expressions
@using System.Reflection
@using System.Text.Json
@using SmGenPar.Logic.Models
@using SmGenPar.Logic.Reflection

<EditForm Model="@Model"
          OnSubmit="@OnSubmit"
          OnValidSubmit="@OnValidSubmit"
          OnInvalidSubmit="@OnInvalidSubmit">
    @(RenderForm())
    @ChildContent
</EditForm>

@code {

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    [Parameter]
    public object? Model { get; set; }

    [Parameter]
    public EventCallback<EditContext> OnSubmit { get; set; }

    [Parameter]
    public EventCallback<EditContext> OnValidSubmit { get; set; }

    [Parameter]
    public EventCallback<EditContext> OnInvalidSubmit { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    RenderFragment RenderForm() => builder =>
    {
        var type = Model?.GetType()!;
        foreach (var propertyInfo in type.GetPropertiesCached()) {
            var attributes = propertyInfo.GetCustomAttributes().ToArray();
            builder.OpenElement(0, "div");
            RenderHelper.AddLabelElement(builder, propertyInfo.Name, propertyInfo.Name);
            builder.CloseElement();
            RenderHelper.AddInput(builder, propertyInfo.PropertyType, args =>
            {
                var converter = TypeDescriptor.GetConverter(propertyInfo.PropertyType);

                propertyInfo.SetValue(Model,
                    converter.CanConvertFrom(args.Value!.GetType())
                        ? converter.ConvertFrom(args.Value)
                        : args.Value);
            }, attributes);
        }
    };

}

}